{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\u6BD5\\u4E1A\\u8BBE\\u8BA1\\\\\\u5B9E\\u8DF5\\u8D44\\u6599\\\\20210201\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\components\\\\chuanzhi.tsx\";\nvar __jsx = React.createElement;\n// import Link from 'next/link'\n// import { withRouter } from \"next/router\";\nimport React from \"react\";\nimport \"../../static/css/font-awesome.css\";\n\n// const IndexPage = (props: IProps) => {\n//   console.log(props.key);\n//   return (\n//     <Layout title=\"书本详情界面\">\n//     <div>书本详情页面\n//         {props.key}\n//     </div>\n//     </Layout>\n//   );\n// };\nclass Child extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Andy',\n      age: 20,\n      msg: \"来自子类的消息\"\n    };\n    this.change = this.change.bind(this);\n  }\n\n  change() {\n    //调用父组件的方法修改父组件的内容\n    this.props.callback(this.state.msg, this.state.name, this.state.age);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }, this.props.name), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    }, this.props.age), __jsx(\"button\", {\n      onClick: this.change,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, \"\\u70B9\\u51FB\"));\n  }\n\n} //getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\n//当刷新页面(初次载入页面)，该方法会在服务器执行\n//当通过<Link>跳转路由的时候，该方法会在客户端执行\n// IndexPage.getInitialProps = async () => {\n//   const res = await fetch(\"http://localhost:3001/api/users\");\n//   const data = await res.json();\n//   //这边返回的数据会被挂载到组件的props中\n//   return { show: data };\n// };\n\n\nexport default IndexPage;","map":{"version":3,"sources":["D:/react毕业设计/实践资料/20210201/20210201/code/next-ts模板/my-app/pages/components/chuanzhi.tsx"],"names":["React","Child","Component","constructor","props","state","name","age","msg","change","bind","callback","render","IndexPage"],"mappings":";;AAAA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAC,MADE;AAEPC,MAAAA,GAAG,EAAC,EAFG;AAGPC,MAAAA,GAAG,EAAC;AAHG,KAAX;AAKA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACH;;AAEDD,EAAAA,MAAM,GAAE;AACJ;AACA,SAAKL,KAAL,CAAWO,QAAX,CAAoB,KAAKN,KAAL,CAAWG,GAA/B,EAAmC,KAAKH,KAAL,CAAWC,IAA9C,EAAmD,KAAKD,KAAL,CAAWE,GAA9D;AACH;;AAEDK,EAAAA,MAAM,GAAE;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKR,KAAL,CAAWE,IAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKF,KAAL,CAAWG,GAAjB,CAFJ,EAGI;AAAQ,MAAA,OAAO,EAAE,KAAKE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CADJ;AAOH;;AAxBgC,C,CA2BnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeI,SAAf","sourcesContent":["// import Link from 'next/link'\r\nimport Layout from \"../../components/Layout\";\r\n// import { withRouter } from \"next/router\";\r\nimport React from \"react\";\r\nimport \"@/static/css/font-awesome.css\";\r\nimport { watch } from \"fs\";\r\n// import \"./css/index.css\";\r\n// import fetch from \"isomorphic-unfetch\";\r\n// import Fromdemo from \"./components/from\"\r\n// 声明的全局数据\r\ntype IProps = Readonly<{\r\n  key: String\r\n}>;\r\n// const IndexPage = (props: IProps) => {\r\n//   console.log(props.key);\r\n//   return (\r\n//     <Layout title=\"书本详情界面\">\r\n//     <div>书本详情页面\r\n//         {props.key}\r\n//     </div>\r\n//     </Layout>\r\n//   );\r\n// };\r\n\r\nclass Child extends React.Component{\r\n  constructor(props){\r\n      super(props);\r\n      this.state={\r\n          name:'Andy',\r\n          age:20,\r\n          msg:\"来自子类的消息\"\r\n      };\r\n      this.change = this.change.bind(this);\r\n  }\r\n\r\n  change(){\r\n      //调用父组件的方法修改父组件的内容\r\n      this.props.callback(this.state.msg,this.state.name,this.state.age);\r\n  }\r\n\r\n  render(){\r\n      return(\r\n          <div>\r\n              <div>{this.props.name}</div>\r\n              <div>{this.props.age}</div>\r\n              <button onClick={this.change}>点击</button>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\n//getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\r\n//当刷新页面(初次载入页面)，该方法会在服务器执行\r\n//当通过<Link>跳转路由的时候，该方法会在客户端执行\r\n// IndexPage.getInitialProps = async () => {\r\n//   const res = await fetch(\"http://localhost:3001/api/users\");\r\n//   const data = await res.json();\r\n//   //这边返回的数据会被挂载到组件的props中\r\n//   return { show: data };\r\n// };\r\n\r\nexport default IndexPage;\r\n"]},"metadata":{},"sourceType":"module"}