{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\react\\u6BD5\\u4E1A\\u8BBE\\u8BA1\\\\\\u5B9E\\u8DF5\\u8D44\\u6599\\\\20210201\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\newbook\\\\[id].tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { withRouter } from \"next/router\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\"; // import { Button } from 'antd';\n// import { useEffect } from 'react'\n// const IndexPage = (props: any) => {\n//     const router = useRouter();\n//     console.log(router.query.id)\n//   return (\n//     <Layout title=\"详情页\">\n//       <div>详情页</div>\n//     </Layout>\n//   );\n// };\n\nvar router = useRouter(); // console.log(router.query.id);\n\nvar IndexPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(IndexPage, _React$Component);\n\n  var _super = _createSuper(IndexPage);\n\n  function IndexPage() {\n    _classCallCheck(this, IndexPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IndexPage, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 12\n        }\n      });\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // constructor(props: any) {\n    //     super(props);\n    //     this.state = { selected: false };\n    //   }\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {\n                  show: show\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IndexPage;\n}(React.Component); // getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\n// 当刷新页面(初次载入页面)，该方法会在服务器执行\n// 当通过<Link>跳转路由的时候，该方法会在客户端执行\n// IndexPage.getInitialProps = async () => {\n//     const res = await fetch(`http://localhost:3001/essay/${router.query.id}`);\n//     const data = await res.json();\n//     //这边返回的数据会被挂载到组件的props中\n//     return { show: data }\n// }\n\n\nexport default _c = withRouter(IndexPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["D:/react毕业设计/实践资料/20210201/20210201/code/next-ts模板/my-app/pages/newbook/[id].tsx"],"names":["withRouter","useRouter","React","router","IndexPage","show","Component"],"mappings":";;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAGF,SAAS,EAAtB,C,CACA;;IACMG,S;;;;;;;;;;;;;6BAcK;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;AAfD;AACA;AACA;AACA;;;;;;;iDAQS;AAAEC,kBAAAA,IAAI,EAAJA;AAAF,iB;;;;;;;;;;;;;;;;;;;EAZaH,KAAK,CAACI,S,GAkB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,oBAAeN,UAAU,CAACI,SAAD,CAAzB","sourcesContent":["import Layout from \"../../components/Layout\";\r\nimport { withRouter } from \"next/router\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\n// import { Button } from 'antd';\r\n// import { useEffect } from 'react'\r\n\r\n// const IndexPage = (props: any) => {\r\n//     const router = useRouter();\r\n//     console.log(router.query.id)\r\n//   return (\r\n//     <Layout title=\"详情页\">\r\n//       <div>详情页</div>\r\n//     </Layout>\r\n//   );\r\n// };\r\nlet router = useRouter();\r\n// console.log(router.query.id);\r\nclass IndexPage extends React.Component {\r\n  // constructor(props: any) {\r\n  //     super(props);\r\n  //     this.state = { selected: false };\r\n  //   }\r\n \r\n  static async getInitialProps() {\r\n    // const res = await fetch(`http://localhost:3001/essay/${router.query.id}`);\r\n\r\n    // const show = await res.json();\r\n    // console.log(show);\r\n    //这边返回的数据会被挂载到组件的props中\r\n    return { show };\r\n  }\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n// getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\r\n// 当刷新页面(初次载入页面)，该方法会在服务器执行\r\n// 当通过<Link>跳转路由的时候，该方法会在客户端执行\r\n// IndexPage.getInitialProps = async () => {\r\n//     const res = await fetch(`http://localhost:3001/essay/${router.query.id}`);\r\n//     const data = await res.json();\r\n//     //这边返回的数据会被挂载到组件的props中\r\n//     return { show: data }\r\n// }\r\n\r\nexport default withRouter(IndexPage);\r\n"]},"metadata":{},"sourceType":"module"}