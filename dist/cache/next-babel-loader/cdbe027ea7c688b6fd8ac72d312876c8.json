{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\u6BD5\\u4E1A\\u8BBE\\u8BA1\\\\\\u5B9E\\u8DF5\\u8D44\\u6599\\\\20210201\\\\20210201\\\\code\\\\next-ts\\u6A21\\u677F\\\\my-app\\\\pages\\\\novel\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/Layout\";\nimport { withRouter } from \"next/router\";\nimport React, { useState, useRef } from \"react\";\nimport \"../../static/css/font-awesome.css\";\nimport \"../css/novel.css\";\nimport fetch from \"isomorphic-unfetch\";\n// 声明的全局数据\nlet imgnumber = 0;\nlet test = {\n  key: \"111\"\n};\n\nconst IndexPage = props => {\n  //引用页面元素\n  const inputRef = useRef(null);\n  let {\n    0: user,\n    1: setuser\n  } = useState(\"\");\n\n  const handleSubmit = () => {\n    console.log(inputRef.current && inputRef.current.value);\n\n    if (inputRef.current) {// setuser(inputRef.current.value)\n    }\n  };\n\n  return __jsx(Layout, {\n    title: \"\\u5206\\u7C7B\\uFF1A\\u5C0F\\u8BF4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    class: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n}; // getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\n// 当刷新页面(初次载入页面)，该方法会在服务器执行\n// 当通过<Link>跳转路由的时候，该方法会在客户端执行\n\n\nIndexPage.getInitialProps = async () => {\n  const res = await fetch(\"http://localhost:3001/novel\");\n  const data = await res.json(); //这边返回的数据会被挂载到组件的props中\n\n  return {\n    show: data\n  };\n};\n\nexport default withRouter(IndexPage);","map":{"version":3,"sources":["D:/react毕业设计/实践资料/20210201/20210201/code/next-ts模板/my-app/pages/novel/index.tsx"],"names":["Layout","withRouter","React","useState","useRef","fetch","imgnumber","test","key","IndexPage","props","inputRef","user","setuser","handleSubmit","console","log","current","value","getInitialProps","res","data","json","show"],"mappings":";;AACA,OAAOA,MAAP;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA;AACA;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAGA;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,IAAI,GAAG;AACTC,EAAAA,GAAG,EAAE;AADI,CAAX;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAgB;AAChC;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAAmB,IAAnB,CAAvB;AACA,MAAI;AAAA,OAACQ,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,EAAD,CAA9B;;AACA,QAAMW,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACM,OAAT,CAAiBC,KAAjD;;AACA,QAAIP,QAAQ,CAACM,OAAb,EAAsB,CACpB;AACD;AACF,GALD;;AASA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAlBD,C,CAoBA;AACA;AACA;;;AACAR,SAAS,CAACU,eAAV,GAA4B,YAAY;AACtC,QAAMC,GAAG,GAAG,MAAMf,KAAK,CAAC,6BAAD,CAAvB;AACA,QAAMgB,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB,CAFsC,CAGtC;;AACA,SAAO;AAAEC,IAAAA,IAAI,EAAEF;AAAR,GAAP;AACD,CALD;;AAOA,eAAepB,UAAU,CAACQ,SAAD,CAAzB","sourcesContent":["import Link from \"next/link\";\r\nimport Layout from \"../../components/Layout\";\r\nimport { withRouter } from \"next/router\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"@/static/css/font-awesome.css\";\r\nimport \"../css/novel.css\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Chuanzhi from \"../components/footerbook\";\r\n\r\n// 声明的全局数据\r\nlet imgnumber = 0;\r\nlet test = {\r\n  key: \"111\",\r\n};\r\nconst IndexPage = (props: any) => {\r\n  //引用页面元素\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  let [user, setuser] = useState(\"\");\r\n  const handleSubmit = () => {\r\n    console.log(inputRef.current && inputRef.current.value);\r\n    if (inputRef.current) {\r\n      // setuser(inputRef.current.value)\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Layout title=\"分类：小说\">\r\n      <div class></div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// getInitialProps 方法既可以在服务器运行，又可以在客户端运行(组件创建之前执行的)\r\n// 当刷新页面(初次载入页面)，该方法会在服务器执行\r\n// 当通过<Link>跳转路由的时候，该方法会在客户端执行\r\nIndexPage.getInitialProps = async () => {\r\n  const res = await fetch(\"http://localhost:3001/novel\");\r\n  const data = await res.json();\r\n  //这边返回的数据会被挂载到组件的props中\r\n  return { show: data };\r\n};\r\n\r\nexport default withRouter(IndexPage);\r\n"]},"metadata":{},"sourceType":"module"}